!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DeeperNode	succ_array.hpp	/^  typedef MeasuredPtr<std::shared_ptr<FingerNode<Value, Measure>>, Measure> DeeperNode;$/;"	t	struct:HeteroArrayFour
DeeperNode	succ_array.hpp	/^  typedef MeasuredPtr<std::shared_ptr<FingerNode<Value, Measure>>, Measure> DeeperNode;$/;"	t	struct:HeteroArrayOne
DeeperNode	succ_array.hpp	/^  typedef MeasuredPtr<std::shared_ptr<FingerNode<Value, Measure>>, Measure> DeeperNode;$/;"	t	struct:HeteroArrayRest
DeeperNode	succ_array.hpp	/^  typedef MeasuredPtr<std::shared_ptr<FingerNode<Value, Measure>>, Measure> DeeperNode;$/;"	t	struct:HeteroArrayThree
DeeperNode	succ_array.hpp	/^  typedef MeasuredPtr<std::shared_ptr<FingerNode<Value, Measure>>, Measure> DeeperNode;$/;"	t	struct:HeteroArrayTwo
Element	level.hpp	/^	typedef MeasuredPtr<Measure, std::shared_ptr<FingerNode<Value, Measure>>> Element;$/;"	t	class:FingerNodeInner
FingerNode	level.hpp	/^class FingerNode {$/;"	c
FingerNodeInner	level.hpp	/^class FingerNodeInner: public FingerNode<Value, Measure> {$/;"	c
FingerNodeLeaf	level.hpp	/^class FingerNodeLeaf: public FingerNode<Value, Measure> {$/;"	c
FingerTree	finger_tree.hpp	/^    FingerTree(bool left, const Spine *near, const Spine *far) {$/;"	f	class:FingerTree
FingerTree	finger_tree.hpp	/^    FingerTree(const Spine *left, const Spine *right):$/;"	f	class:FingerTree
FingerTree	finger_tree.hpp	/^    FingerTree(void): left(), right() {}$/;"	f	class:FingerTree
FingerTree	finger_tree.hpp	/^class FingerTree {$/;"	c
HeteroArrayAny	succ_array.hpp	/^struct HeteroArrayAny {$/;"	s
HeteroArrayFour	succ_array.hpp	/^  HeteroArrayFour(const MeasuredPtr<Value, Measure> slop, const std::vector<DeeperNode> rest):$/;"	f	struct:HeteroArrayFour
HeteroArrayFour	succ_array.hpp	/^struct HeteroArrayFour: public HeteroArrayOne<Value, Measure> {$/;"	s
HeteroArrayOne	succ_array.hpp	/^  HeteroArrayOne(const MeasuredPtr<Value, Measure> one, const std::vector<DeeperNode> rest):$/;"	f	struct:HeteroArrayOne
HeteroArrayOne	succ_array.hpp	/^struct HeteroArrayOne: HeteroArrayRest<Value, Measure> {$/;"	s
HeteroArrayRest	succ_array.hpp	/^  HeteroArrayRest(std::vector<DeeperNode> rest): rest(rest) {}$/;"	f	struct:HeteroArrayRest
HeteroArrayRest	succ_array.hpp	/^struct HeteroArrayRest: HeteroArrayAny<Value, Measure> {$/;"	s
HeteroArrayThree	succ_array.hpp	/^  HeteroArrayThree(std::vector<DeeperNode> rest): HeteroArrayRest<Value, Measure>(rest) {}$/;"	f	struct:HeteroArrayThree
HeteroArrayThree	succ_array.hpp	/^struct HeteroArrayThree: public HeteroArrayRest<Value, Measure> {$/;"	s
HeteroArrayTwo	succ_array.hpp	/^  HeteroArrayTwo(const MeasuredPtr<Value, Measure> one, const MeasuredPtr<Value, Measure> two, const std::vector<DeeperNode> rest):$/;"	f	struct:HeteroArrayTwo
HeteroArrayTwo	succ_array.hpp	/^struct HeteroArrayTwo: HeteroArrayRest<Value, Measure> {$/;"	s
Level	level.hpp	/^    Level(const int state, const Value affix, const Value slop): $/;"	f	class:Level
Level	level.hpp	/^class Level {$/;"	c
LevelType	finger_tree.hpp	/^  typedef Level<Bitmask, Value, Measure> LevelType;$/;"	t	class:FingerTree
LevelType	succ_array.hpp	/^  typedef Level<Bitmask, Value, Measure> LevelType;$/;"	t	class:SuccinctArray
MaxPriority	priority_queue.hpp	/^class MaxPriority: MeasuredPtr<Value> {$/;"	c
MeasuredPtr	level.hpp	/^struct MeasuredPtr {$/;"	s
Measurer	measure.hpp	/^class Measurer {$/;"	c
PersistentSequence	priority_queue.hpp	/^class PersistentSequence: FingerTree<long long, int, SequenceLength, Value> {$/;"	c
PersistentSequence	random_access.hpp	/^class PersistentSequence: FingerTree<long, size_t, Value, SequenceLength<Value>> {$/;"	c
SequenceLength	random_access.hpp	/^class SequenceLength: public Measurer<size_t, Value> {$/;"	c
Spine	finger_tree.hpp	/^  typedef SuccinctArray<Bitmask, Value, HeteroArrayAny<Value, Measure>, Measure> Spine;$/;"	t	class:FingerTree
SuccinctArray	succ_array.hpp	/^    SuccinctArray(Bitmask mask, ArrayType *contents): contents(*contents), schema(mask) {}$/;"	f	class:SuccinctArray
SuccinctArray	succ_array.hpp	/^    SuccinctArray(void): contents(), schema() {}$/;"	f	class:SuccinctArray
SuccinctArray	succ_array.hpp	/^class SuccinctArray {$/;"	c
__FINGER_TREE_BITMASK	bitmask.hpp	/^#define __FINGER_TREE_BITMASK$/;"	d
__FINGER_TREE_H	finger_tree.hpp	/^#define __FINGER_TREE_H$/;"	d
__FINGER_TREE_LEVEL	level.hpp	/^#define __FINGER_TREE_LEVEL$/;"	d
__FINGER_TREE_MEASURE	measure.hpp	/^#define __FINGER_TREE_MEASURE$/;"	d
__FINGER_TREE_PRIORITY_H	priority_queue.hpp	/^#define __FINGER_TREE_PRIORITY_H$/;"	d
__FINGER_TREE_SEQUENCE_H	random_access.hpp	/^#define __FINGER_TREE_SEQUENCE_H$/;"	d
__FINGER_TREE_SUCC_ARRY	succ_array.hpp	/^#define __FINGER_TREE_SUCC_ARRY$/;"	d
add	level.hpp	/^    add(bool left, Value elem) const {$/;"	f	class:Level
affix	level.hpp	/^    const Value affix;$/;"	m	class:Level
affix	succ_array.hpp	/^  const MeasuredPtr<Measure, Value> affix;$/;"	m	struct:HeteroArrayTwo
append	random_access.hpp	/^    const PersistentSequence<Value> append (Value v) {$/;"	f	class:PersistentSequence
append	succ_array.hpp	/^SuccinctArray<Bitmask, Value, ArrayType, Measure>::append(const SuccinctArray *other) const {$/;"	f	class:SuccinctArray
bitmaskFor	bitmask.hpp	/^constexpr Bitmask bitmaskFor(const int state) {$/;"	f
bitmaskFor	succ_array.hpp	/^constexpr Bitmask bitmaskFor(const int state) {$/;"	f
combine	priority_queue.hpp	/^  combine(Measure left) const {$/;"	f	class:MaxPriority
contents	succ_array.hpp	/^    const ArrayType contents;$/;"	m	class:SuccinctArray
find	finger_tree.hpp	/^    find(const Measure *goal) const {$/;"	f	class:FingerTree
find	succ_array.hpp	/^SuccinctArray<Bitmask, Value, ArrayType, Measure>::find(const Measure goal, const Measure accum) const {$/;"	f	class:SuccinctArray
findInner	succ_array.hpp	/^SuccinctArray<Bitmask, Value, ArrayType, Measure>::findInner $/;"	f	class:SuccinctArray
footprint	bitmask.hpp	/^constexpr int footprint(const int state) {$/;"	f
footprint	succ_array.hpp	/^constexpr int footprint(const int state) {$/;"	f
get	random_access.hpp	/^    const Value get(size_t i) const {$/;"	f	class:PersistentSequence
getLevel	succ_array.hpp	/^SuccinctArray<Bitmask, Value, ArrayType, Measure>::getLevel(int level, int state) const {$/;"	f	class:SuccinctArray
getState	succ_array.hpp	/^SuccinctArray<Bitmask, Value, ArrayType, Measure>::getState(int level) const {$/;"	f	class:SuccinctArray
getidentity	priority_queue.hpp	/^  getidentity(void) {$/;"	f	class:MaxPriority
left	finger_tree.hpp	/^    const Spine left;$/;"	m	class:FingerTree
left	level.hpp	/^    const Element left;$/;"	m	class:FingerNodeInner
left	level.hpp	/^    const MeasuredPtr<Measure, Value> left;$/;"	m	class:FingerNodeLeaf
length	priority_queue.hpp	/^  const int length;$/;"	m	class:MaxPriority
level	level.hpp	/^      const int level;$/;"	m	class:FingerNode
main	random_access_test.cpp	/^int main(void) {$/;"	f
main	test.cpp	/^main(void) $/;"	f
mask	level.hpp	/^    mask(void) const {$/;"	f	class:Level
measure	finger_tree.hpp	/^    const Measurer measure;$/;"	m	class:FingerTree
measure	level.hpp	/^      const MeasuredPtr<Measure, Value> measure;$/;"	m	class:FingerNode
measure	level.hpp	/^    Measure measure;$/;"	m	struct:MeasuredPtr
measure	priority_queue.hpp	/^  measure(Value item) {$/;"	f	class:MaxPriority
middle	level.hpp	/^    const Element middle;$/;"	m	class:FingerNodeInner
middle	level.hpp	/^    const MeasuredPtr<Measure, Value> middle;$/;"	m	class:FingerNodeLeaf
one_affix	bitmask.hpp	/^#define one_affix /;"	d
one_affix	bitmask.hpp	/^#undef one_affix$/;"	d
one_affix	succ_array.hpp	/^#define one_affix /;"	d
one_affix	succ_array.hpp	/^#undef one_affix$/;"	d
operator []	priority_queue.hpp	/^    const &Value operator [](int i) const {$/;"	f	class:PersistentSequence
parallelOverflow	succ_array.hpp	/^SuccinctArray<Bitmask, Value, ArrayType, Measure>::parallelOverflow$/;"	f	class:SuccinctArray
parallelUnderflow	succ_array.hpp	/^SuccinctArray<Bitmask, Value, ArrayType, Measure>::parallelUnderflow$/;"	f	class:SuccinctArray
peekLeft	finger_tree.hpp	/^FingerTree<Bitmask, Measure, Value, Measurer>::peekLeft(void) const $/;"	f	class:FingerTree
peekRight	finger_tree.hpp	/^FingerTree<Bitmask, Measure, Value, Measurer>::peekRight(void) const $/;"	f	class:FingerTree
pop	finger_tree.hpp	/^FingerTree<Bitmask, Measure, Value, Measurer>::pop(const bool left, const Spine *near, const Spine *far) const$/;"	f	class:FingerTree
popLeft	finger_tree.hpp	/^    popLeft(void) const {$/;"	f	class:FingerTree
popRight	finger_tree.hpp	/^    popRight(void) const {$/;"	f	class:FingerTree
predicate	priority_queue.hpp	/^  predicate(const MeasuredPtr<size_t, Value> generic_other) const {$/;"	f	class:MaxPriority
priority	priority_queue.hpp	/^Measure tree to get max priority, then measure the tree to$/;"	v	typeref:class:MaxPriority
push	finger_tree.hpp	/^FingerTree<Bitmask, Measure, Value, Measurer>::push(const bool left, const Spine *near, const Spine *far, const Value elem) const$/;"	f	class:FingerTree
pushFingerInt	test.cpp	/^pushFingerInt(void)$/;"	f
pushLeft	finger_tree.hpp	/^    pushLeft(const Value elem) const {$/;"	f	class:FingerTree
pushRight	finger_tree.hpp	/^    pushRight(const Value elem) const {$/;"	f	class:FingerTree
query	level.hpp	/^      find(MeasuredPtr<Measure, Value> query) = 0;$/;"	m	class:FingerNode
remove	level.hpp	/^    remove(bool left) const {$/;"	f	class:Level
rest	succ_array.hpp	/^  const std::vector<DeeperNode> rest;$/;"	m	struct:HeteroArrayRest
right	finger_tree.hpp	/^    const Spine right;$/;"	m	class:FingerTree
right	level.hpp	/^    const Element right;$/;"	m	class:FingerNodeInner
right	level.hpp	/^    const MeasuredPtr<Measure, Value> right;$/;"	m	class:FingerNodeLeaf
schema	succ_array.hpp	/^    const Bitmask schema;$/;"	m	class:SuccinctArray
setHeadLevel	succ_array.hpp	/^SuccinctArray<Bitmask, Value, ArrayType, Measure>::setHeadLevel$/;"	f	class:SuccinctArray
slop	bitmask.hpp	/^#define slop /;"	d
slop	bitmask.hpp	/^#undef slop$/;"	d
slop	level.hpp	/^    const Value slop;$/;"	m	class:Level
slop	succ_array.hpp	/^  const MeasuredPtr<Measure, Value> slop;$/;"	m	struct:HeteroArrayOne
slop	succ_array.hpp	/^  const MeasuredPtr<Measure, Value> slop;$/;"	m	struct:HeteroArrayTwo
slop	succ_array.hpp	/^#define slop /;"	d
slop	succ_array.hpp	/^#undef slop$/;"	d
state	bitmask.hpp	/^state(const Bitmask bitmask) {$/;"	f
state	level.hpp	/^    const int state;$/;"	m	class:Level
state	succ_array.hpp	/^state(const Bitmask bitmask) {$/;"	f
stateRepeat	bitmask.hpp	/^stateRepeat(const int state) {$/;"	f
stateRepeat	succ_array.hpp	/^stateRepeat(const int state) {$/;"	f
stateRepeatTimes	bitmask.hpp	/^stateRepeatTimes(const Bitmask state, const int num) {$/;"	f
stateRepeatTimes	succ_array.hpp	/^stateRepeatTimes(const Bitmask state, const int num) {$/;"	f
three_affix	bitmask.hpp	/^#define three_affix /;"	d
three_affix	bitmask.hpp	/^#undef three_affix$/;"	d
three_affix	succ_array.hpp	/^#define three_affix /;"	d
three_affix	succ_array.hpp	/^#undef three_affix$/;"	d
value	level.hpp	/^    Value value;$/;"	m	struct:MeasuredPtr
